/*
 * Praktikum:           P1P 
 * Semester:            WS09
 * Team-Name:           S3T4
 * Namen:               Dolberg, Konstantin     #1959949
 *                      Eisenbraun, Alexander   #1965085
 * Aufgaben-Nr.:        A07
 * Kontrolleur:     
 * Datum der Abnahme:   01.12.2009
 * Quellen:             URL: https://pub.informatik.haw-hamburg.de/home/pub/prof/schafers/S09W_P1/Aufgabenzettel_Nr3_v05.pdf
 */
package a07;

public class Cuboid extends Field {
	Point[] p;
	
	
	double []entfernung = new double[8];
	double []entfernung2= new double[8];
	int counter = 0;
	double result = 0;
	
	public Cuboid(Point[] p) {
		this.p = p;
	}

	public double[] checkCuboid() {
		for (int j = 1; j < p.length; j++) {
		entfernung[j]= Math.sqrt((Math.pow((p[0].getX() - p[j].getX()),2 )
				+ (Math.pow((p[0].getY() - p[j].getY()),2)
				+ (Math.pow((p[0].getZ() - p[j].getZ()),2)))));			
		}
		for (int i = 2; i < p.length; i++) {
			entfernung2[i]= Math.sqrt((Math.pow((p[1].getX() - p[i].getX()),2)
					+ (Math.pow((p[1].getY() - p[i].getY()),2)
					+ (Math.pow((p[1].getZ() - p[i].getZ()),2)))));			
		}
		entfernung2[0]= Math.sqrt((Math.pow((p[1].getX() - p[0].getX()),2)
				+ (Math.pow((p[1].getY() - p[0].getY()),2)
				+ (Math.pow((p[1].getZ() - p[0].getZ()),2)))));
		for (int i = 0;  i< 8; i++) {
			for (int j = 0; j < 8; j++) {
				if(entfernung[i]==entfernung2[j]){
					counter++;
				}
			}
		}
		for (int i = 0; i < entfernung.length - 1; i++) {
			for (int j = i + 1; j < entfernung.length; j++) {
				if (entfernung[i] < entfernung[j]) {
					result = entfernung[j];
					entfernung[j] = entfernung[i];
					entfernung[i] = result;					
				}
			}
		}		
		return entfernung;
	}	

	public double getBreite() {
		return entfernung[5];
	}

	public double getHöhe() {
		return  entfernung[6];
	}

	public double getLänge() {
		return entfernung[3];
	}
	
	public Point getCenter() {

	    Point xyz = new Point(0,0,0);
	    
	    double resultXsumme = 0;
	    double resultYsumme = 0;
	    double resultZsumme = 0;

	    for (int i = 0; i < p.length; i++) {
	        resultXsumme += p[i].getX();
	        resultYsumme += p[i].getY();
	        resultZsumme += p[i].getZ();
	    }
	    xyz.setX(resultXsumme/8);
	    xyz.setY(resultYsumme/8);
	    xyz.setZ(resultZsumme/8);
	    return xyz;
	}	

	public double getSurface() {
		return 2 * (getHöhe() * getBreite() + getHöhe() * getLänge() + getBreite()
				* getLänge());
	}

	public double getVolume() {
		return (getHöhe() * getBreite() * getLänge());
	}

	public String toString() {
		System.out.println("Cuboid Points");
		for (int i = 0; i < p.length; i++) {
			System.out.println(p[i]);			
		}
		checkCuboid();
		return counter>=7  ?  String.format("Cuboid\nVolumen " + getVolume()
				+ "\nOberfläche " + getSurface() + "\nPunkte: "
				+ getCenter().toString()):String.format("kein Quader");
	}
}